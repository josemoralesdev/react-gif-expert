{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","onClick","textToCopy","navigator","clipboard","window","isSecureContext","writeText","textArea","document","createElement","style","position","left","top","body","appendChild","focus","select","Promise","res","rej","execCommand","remove","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","ReactDOM","render","getElementById"],"mappings":"2LAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC7B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACC,uBAAMC,SATc,SAACC,GACrBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKf,UACC,8CACA,uBACCO,KAAK,OACLC,MAAOT,EACPU,SAnBuB,SAACP,GAC1B,IAAQM,EAAUN,EAAEQ,OAAZF,MACRR,EAAcQ,U,+BCRHG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBC,EADgB,iDACgCC,UAAUH,GAD1C,+DAEHI,MAAMF,GAFH,cAEhBG,EAFgB,gBAGCA,EAAKC,OAHN,uBAGdC,EAHc,EAGdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARd,kBAWfM,GAXe,4CAAH,sDCEPO,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IA2BxC,OACC,sBAAKc,QA1BkB,WACvB,IAAIC,EAAaf,EAEjB,GAAIgB,UAAUC,WAAaC,OAAOC,gBAEjC,OAAOH,UAAUC,UAAUG,UAAUL,GAGrC,IAAIM,EAAWC,SAASC,cAAc,YAStC,OARAF,EAAS3B,MAAQqB,EAEjBM,EAASG,MAAMC,SAAW,QAC1BJ,EAASG,MAAME,KAAO,YACtBL,EAASG,MAAMG,IAAM,YACrBL,SAASM,KAAKC,YAAYR,GAC1BA,EAASS,QACTT,EAASU,SACF,IAAIC,SAAQ,SAACC,EAAKC,GAExBZ,SAASa,YAAY,QAAUF,IAAQC,IACvCb,EAASe,aAMoBC,UAAU,yCAAzC,UACC,qBAAKC,IAAKtC,EAAKuC,IAAK7B,IACpB,4BAAIA,QC5BM8B,EAAU,SAAC,GAAkB,IAAhB1C,EAAe,EAAfA,SAEzB,ECH2B,SAACA,GAE5B,MAA0Bd,mBAAS,CAClCqB,KAAM,GACNoC,SAAS,IAFV,mBAAOC,EAAP,KAAcC,EAAd,KAgBA,OAXAC,qBAAU,WACT/C,EAAQC,GACN+C,MAAK,SAAAlC,GAAM,OACXgC,EAAS,CACRtC,KAAMM,EACN8B,SAAS,SAGV,CAAC3C,IAGG4C,EDf2BI,CAAahD,GAAjCa,EAAd,EAAQN,KAAcoC,EAAtB,EAAsBA,QAEtB,OACC,qCACC,oBAAIJ,UAAU,oCAAd,SAAmDvC,IAClD2C,GAAW,mBAAGJ,UAAU,mCAAb,sBACZ,qBAAKA,UAAU,YAAf,SACE1B,EAAOJ,KAAI,SAACC,GAAD,OACX,cAAC,EAAD,eAEKA,GADCA,EAAIC,aEXFsC,EAAe,WAC3B,MAAoC/D,mBAAS,CAAC,cAA9C,mBAAOQ,EAAP,KAAmBT,EAAnB,KAEA,OACC,qCACC,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEES,EAAWe,KAAI,SAACT,GAAD,OACd,cAAC,EAAD,CAECA,SAAUA,GADLA,Y,MCVZkD,IAASC,OACP,cAAC,EAAD,IACA3B,SAAS4B,eAAe,W","file":"static/js/main.82566efe.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({ setCategories }) => {\n\tconst [inputValue, setInputValue] = useState(\"\");\n\n\tconst handleInputChange = (e) => {\n\t\tconst { value } = e.target;\n\t\tsetInputValue(value);\n\t}\n\n\tconst handleSubmit = (e) => {\n\t\te.preventDefault();\n\t\tif (inputValue.trim().length > 0) {\n\t\t\tsetCategories(categories => [inputValue, ...categories]);\n\t\t\tsetInputValue(\"\");\n\t\t}\n\t}\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<h2>Add Category</h2>\n\t\t\t<input\n\t\t\t\ttype=\"text\"\n\t\t\t\tvalue={inputValue}\n\t\t\t\tonChange={handleInputChange}\n\t\t\t/>\n\t\t</form>\n\t)\n}\n\nAddCategory.propTypes = {\n\tsetCategories: PropTypes.func.isRequired,\n}\n","export const getGifs = async (category) => {\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=zHQpIQlssiu9BS4B8oCsTVCIzHRejcOc`;\n\tconst resp = await fetch(url);\n\tconst { data } = await resp.json();\n\tconst gifs = data.map((img) => {\n\t\treturn {\n\t\t\tid: img.id,\n\t\t\ttitle: img.title,\n\t\t\turl: img.images?.downsized_medium.url,\n\t\t}\n\t})\n\treturn gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n\n\tconst copyToClipboard = () => {\n\t\tlet textToCopy = url;\n\t\t// navigator clipboard api needs a secure context (https)\n\t\tif (navigator.clipboard && window.isSecureContext) {\n\t\t\t// navigator clipboard api method'\n\t\t\treturn navigator.clipboard.writeText(textToCopy);\n\t\t} else {\n\t\t\t// text area method\n\t\t\tlet textArea = document.createElement(\"textarea\");\n\t\t\ttextArea.value = textToCopy;\n\t\t\t// make the textarea out of viewport\n\t\t\ttextArea.style.position = \"fixed\";\n\t\t\ttextArea.style.left = \"-999999px\";\n\t\t\ttextArea.style.top = \"-999999px\";\n\t\t\tdocument.body.appendChild(textArea);\n\t\t\ttextArea.focus();\n\t\t\ttextArea.select();\n\t\t\treturn new Promise((res, rej) => {\n\t\t\t\t// here the magic happens\n\t\t\t\tdocument.execCommand('copy') ? res() : rej();\n\t\t\t\ttextArea.remove();\n\t\t\t});\n\t\t}\n\t}\n\n\treturn (\n\t\t<div onClick={copyToClipboard} className=\"card animate__animated animate__fadeIn\">\n\t\t\t<img src={url} alt={title} />\n\t\t\t<p>{title}</p>\n\t\t</div>\n\t)\n}\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n\tconst { data: images, loading } = useFetchGifs(category);\n\n\treturn (\n\t\t<>\n\t\t\t<h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\n\t\t\t{loading && <p className=\"animate__animated animate__flash\">Cargando</p>}\n\t\t\t<div className=\"card-grid\">\n\t\t\t\t{images.map((img) => (\n\t\t\t\t\t<GifGridItem\n\t\t\t\t\t\tkey={img.id}\n\t\t\t\t\t\t{...img}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</>\n\t)\n}\n","import { useState, useEffect } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n\n\tconst [state, setState] = useState({\n\t\tdata: [],\n\t\tloading: true,\n\t})\n\n\tuseEffect(() => {\n\t\tgetGifs(category)\n\t\t\t.then(images => (\n\t\t\t\tsetState({\n\t\t\t\t\tdata: images,\n\t\t\t\t\tloading: false,\n\t\t\t\t})\n\t\t\t));\n\t}, [category])\n\n\n\treturn state;\n}\n","import React, { useState } from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\tconst [categories, setCategories] = useState(['One punch']);\n\n\treturn (\n\t\t<>\n\t\t\t<h2>Gif Expert App</h2>\n\t\t\t<AddCategory setCategories={setCategories} />\n\t\t\t<hr />\n\t\t\t<ol>\n\t\t\t\t{\n\t\t\t\t\tcategories.map((category) => (\n\t\t\t\t\t\t<GifGrid\n\t\t\t\t\t\t\tkey={category}\n\t\t\t\t\t\t\tcategory={category}\n\t\t\t\t\t\t/>\n\t\t\t\t\t))\n\t\t\t\t}\n\t\t\t</ol>\n\t\t</>\n\t)\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}